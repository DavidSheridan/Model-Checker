/**
 * === PROCESS LEXER ===
 * The first section of the compiler pipeline for converting the modelling grammar
 * into a particular model data structure. This process takes a string representing
 *
 */
 
{    
    /* Keywords found in the modelling grammar */
    var KEYWORDS = ['automata', 'petrinet', 'const', 'range', 'set', 'if', 'then', 'else', 'when', 'forall'];
    
    /* Function processes that can be declared in the modelling grammar */
    var FUNCTIONS = ['abs', 'simp'];
    
    /* Keywords that terminate a process sequence */
    var TERMINALS = ['STOP', 'ERROR'];
    
    /**
     * Constructs and returns a token object with the specified type
     * and value.
     *
     * @param {string} type - the token type
     * @param {string|int} value - the value
     * @return {token} - a token object
     */
    function constructToken(type, value){
        return { type: type, value: value, position: location()};
    }
    
    /**
     * Determines whether the specified action is either an action-label,
     * keyword or function and returns the appropriate token object.
     *
     * @param {string} action - the action to construct token for
     * @return {token} - a token object
     */
    function processAction(action){
      // check if parsed action is a keyword
      for(var i = 0; i < KEYWORDS.length; i++){
          if(action == KEYWORDS[i]){
              return constructToken('keyword', action);
          }
      }

      // check if parsed action is a function process
      for(var i = 0; i < FUNCTIONS.length; i++){
          if(action == FUNCTIONS[i]){
              return constructToken('function', action);
          }
      }

      return constructToken('action', action);    
    }
    
    /**
     * Determines whether the specified identifier is either an identifier
     * or terminal and returns the appropriate token object.
     *
     * @param {string} ident - the identifier to construct token for
     * @return {token} - a token object
     */
    function processIdentifier(ident){
      // check if identifier is a terminal
      for(var i = 0; i < TERMINALS.length; i++){
          if(ident == TERMINALS[i]){
              return constructToken('terminal', ident);
          }
      }

      return constructToken('identifier', ident);
    }
}

/**
 * Main process which parses the content of the string passed to the
 * lexer. Recalls 'TokenArrayElement' until the entire string has been
 * parsed and returns an array of the tokens parsed.
 */
TokenArray
 = TokenArrayElement*

/**
 * Attempts to parse a single token from the current position in the string.
 * Will throw an error if a token cannot be parsed.
 */
TokenArrayElement
 = _ action:Action _ { return processAction(action); }
 / _ identifier:Identifier _ { return processIdentifier(identifier); }
 / _ integer:Integer _ {return constructToken('integer', integer); }
 / _ comment:Comment _ { return constructToken('comment', comment); }
 / _ symbol:Symbol _ { return constructToken('symbol', symbol); }
 / _ operator:Operator _ { return constructToken('operator', operator); }
 / _ operation:Operation _ { return constructToken('operation', operation); }

/* Attempts to parse and return an action */
Action "action"
 = $([a-z][a-zA-Z0-9_]*)

/* Attempts to parse and return an identifier */
Identifier "identifier"
 = ident:$([A-Z][a-zA-Z0-9_]*)

/* Attempts to parse and return an integer */
Integer "integer"
 = [0-9]+ { return parseInt(text(), 10); }

/* Attempts to parse and return a comment */
Comment 
 = SingleLinedComment
 / MultiLinedComment

/* Attempts to parse and return a single lined comment */
SingleLinedComment
 = '//' (!LineTerminator SourceCharacter)* { return text(); }

/* Attempts to parse and return a multi lined comment */
MultiLinedComment 
 = '/*' (!'*/' SourceCharacter)* '*/' { return text(); }

/* Helper function used to parse a line terminator for a comment */
LineTerminator
 = [\n\r\u2028\u2029]

/* Helper function used to parse a source character for a comment */
SourceCharacter
 = .

/* Attempts to parse and return a symbol */
Symbol
 = '..'
 / '.'
 / ','
 / ':'
 / '['
 / ']'
 / '('
 / ')'
 / '{'
 / '}'
 / '->'

/* Attempts to parse and return an operator */
Operator
 = '||'
 / '|'
 / '^'
 / '&&'
 / '&'
 / '=='
 / '!='
 / '=' // should be a symbol
 / '<<'
 / '>>'
 / '<='
 / '<'
 / '>='
 / '>'
 / '+'
 / '-'
 / '*'
 / '/'
 / '%'
 / '!'

/* Attempts to parse and return an operation */
Operation
 = '~'

/* Gobbles whitespace */
_ 'whitespace' = [ \t\n\r]*