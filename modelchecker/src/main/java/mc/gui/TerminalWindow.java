package mc.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.redpois0n.terminal.InputListener;
import com.redpois0n.terminal.JTerminal;
import lombok.Getter;
import mc.Main;

import java.awt.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import javax.swing.*;

public class TerminalWindow {

  private Process p;
  @Getter
  private PrintWriter writer;
  @Getter
  private JTerminal terminal;
  private JScrollPane scrollPane;
  private JPanel panel;
  @Getter
  private JProgressBar progressBar1;
  @Getter
  private JPanel progressPanel;
  @Getter
  JFrame frame;

  public TerminalWindow(Main main) {
    terminal.addInputListener(new InputListener() {
      String cmd = "";
      @Override
      public void processCommand(JTerminal terminal, char c) {
        try {
          if (c == '\n') {
            if (writer == null) {
              main.getCommandManager().executeCommand(cmd);
            } else {
              writer.println(cmd);
            }
            cmd = "";
          } else {
            cmd += c;
          }
        } catch (Exception ex) {
          ex.printStackTrace();
        }
      }
      @Override
      public void onTerminate(JTerminal terminal) {
        main.stop();
      }
    });
    frame = new JFrame();
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.addKeyListener(terminal.getKeyListener());
    frame.add(panel);
    frame.setSize(675, 300);
    frame.setVisible(true);
    frame.setTitle("Model Checker Server Process");
  }

  public void wrapProcess(Process p) {
    try {
      this.p = p;
      writer = new PrintWriter(p.getOutputStream(), true);

      new Thread(() -> {
        try {
          while (true) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

            String line;

            while ((line = reader.readLine()) != null) {
              terminal.append(line + "\n");
            }
          }
        } catch (Exception e) {
          e.printStackTrace();
        }
      }).start();
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    panel = new JPanel();
    panel.setLayout(new BorderLayout(0, 0));
    panel.setBackground(new Color(-16777216));
    panel.setForeground(new Color(-16777216));
    panel.setName("null.contentPane");
    scrollPane = new JScrollPane();
    scrollPane.setForeground(new Color(-16777216));
    scrollPane.setVisible(true);
    panel.add(scrollPane, BorderLayout.CENTER);
    scrollPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null));
    terminal = new JTerminal();
    terminal.setContentType("text/plain");
    terminal.setFont(new Font("monospaced", terminal.getFont().getStyle(), 14));
    terminal.setForeground(new Color(-4473925));
    terminal.setMargin(new Insets(0, 0, 0, 0));
    terminal.setOpaque(true);
    terminal.setSelectionEnd(0);
    terminal.setSelectionStart(0);
    terminal.setText("");
    terminal.setVerifyInputWhenFocusTarget(true);
    terminal.setVisible(true);
    scrollPane.setViewportView(terminal);
    progressPanel = new JPanel();
    progressPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
    progressPanel.setBackground(new Color(-16777216));
    progressPanel.setForeground(new Color(-4473925));
    progressPanel.setVisible(false);
    panel.add(progressPanel, BorderLayout.SOUTH);
    progressBar1 = new JProgressBar();
    progressPanel.add(progressBar1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    progressPanel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setForeground(new Color(-1));
    label1.setText("Loading");
    progressPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return panel;
  }
}
