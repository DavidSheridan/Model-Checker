/* ABSTRACTION EQUIVALENCE TESTS */

// basic abstraction
automata {
    Basic = (a -> b -> c -> STOP)\{b}.
    AbsBasic = abs(Basic).
}

petrinet {
    BasicPN = (a -> b -> c -> STOP)\{b}.
    AbsBasicPN = abs(BasicPN).
}

operation {
    AbsBasic ~ automata(AbsBasicPN).
    AbsBasic ~ automata(petrinet(automata(AbsBasicPN))).
}

// abstract the first action
automata {
    Basic2 = (a -> b -> c -> STOP)\{a}.
    AbsBasic2 = abs(Basic2).
}

petrinet {
    Basic2PN = (a -> b -> c -> STOP)\{a}.
    AbsBasic2PN = abs(Basic2PN).
}

operation {
    AbsBasic2 ~ automata(AbsBasic2PN).
    AbsBasic2 ~ automata(petrinet(automata(AbsBasic2PN))).
}

// abstract the last action
automata {
    Basic3 = (a -> b -> c -> STOP)\{c}.
    AbsBasic3 = abs(Basic3).
}

petrinet {
    Basic3PN = (a -> b -> c -> STOP)\{c}.
    AbsBasic3PN = abs(Basic3PN).
}

operation {
    AbsBasic3 ~ automata(AbsBasic3PN).
    AbsBasic3 ~ automata(petrinet(automata(AbsBasic3PN))).
}

// multiple hidden actions
automata {
    Multi = (a -> b -> c -> d -> STOP)\{b, c}.
    AbsMulti = abs(Multi).
}

petrinet {
    MultiPN = (a -> b -> c -> d -> STOP)\{b, c}.
    AbsMultiPN = abs(MultiPN).
}

operation {
    AbsMulti ~ automata(AbsMultiPN).
    AbsMulti ~ automata(petrinet(automata(AbsMultiPN))).
}


// multiple hidden actions at the beginning
automata {
    Multi2 = (a -> b -> c -> d -> STOP)\{a, b}.
    AbsMulti2 = abs(Multi2).
}

automata {
    Multi2PN = (a -> b -> c -> d -> STOP)\{a, b}.
    AbsMulti2PN = abs(Multi2PN).
}

operation {
    AbsMulti2 ~ automata(AbsMulti2PN).
    AbsMulti2 ~ automata(petrinet(automata(AbsMulti2PN))).
}

// multiple hidden actions at the end
automata {
    Multi3 = (a -> b -> c -> d -> STOP)\{c, d}.
    AbsMulti3 = abs(Multi3).
}

petrinet {
    Multi3PN = (a -> b -> c -> d -> STOP)\{c, d}.
    AbsMulti3PN = abs(Multi3PN).
}

operation {
    AbsMulti3 ~ automata(AbsMulti3PN).
    AbsMulti3 ~ automata(petrinet(automata(AbsMulti3PN))).
}

// action hidden to form a tau loop (assumes fair abstraction)
automata {
    Loop = (a -> A),
        A = (x -> A)\{x}.
    AbsLoop = abs(Loop).
}

petrinet {
    LoopPN = (a -> A),
        A = (x -> A)\{x}.
    AbsLoopPN = abs(LoopPN).
}

operation {
    AbsLoop ~ automata(AbsLoopPN).
    AbsLoop ~ automata(petrinet(automata(AbsLoopPN))).
}

// abstract a looped process with a hidden action
automata {
    Loop2 = (a -> x -> Loop2)\{x}.
    AbsLoop2 = abs(Loop2).
}

petrinet {
    Loop2PN = (a -> x -> Loop2PN)\{x}.
    AbsLoop2PN = abs(Loop2PN).
}

operation {
    AbsLoop2 ~ automata(AbsLoop2PN).
    AbsLoop2 ~ automata(petrinet(automata(AbsLoop2PN))).
}

// abstract a looped process with a hidden action
automata {
    Loop3 = (a -> b -> c -> Loop3)\{b}.
    AbsLoop3 = abs(Loop3).
}

petrinet {
    Loop3PN = (a -> b -> c -> Loop3PN)\{b}.
    AbsLoop3PN = abs(Loop3PN).
}

operation {
    AbsLoop3 ~ automata(AbsLoop3PN).
    AbsLoop3 ~ automata(petrinet(automata(AbsLoop3PN))).
}

// abstracting a syncronised action in a concurrent process
automata {
    Concurrent = (a -> b -> c -> STOP || x -> b -> z -> STOP)\{b}.
    AbsConcurrent = abs(Concurrent).
}

petrinet {
    ConcurrentPN = (a -> b -> c -> STOP || x -> b -> z -> STOP)\{b}.
    AbsConcurrentPN = abs(ConcurrentPN).
}

operation {
    AbsConcurrent ~ automata(AbsConcurrentPN).
    AbsConcurrent ~ automata(petrinet(automata(AbsConcurrentPN))).
}

// abstracting a single action in a concurrent process
automata {
    Concurrent2 = (a -> b -> c -> STOP || x -> y -> z -> STOP)\{b}.
    AbsConcurrent2 = abs(Concurrent2).
}

petrinet {
    Concurrent2PN = (a -> b -> c -> STOP || x -> y -> z -> STOP)\{b}.
    AbsConcurrent2PN = abs(Concurrent2PN).
}

operation {
    AbsConcurrent2 ~ automata(AbsConcurrent2PN).
    AbsConcurrent2 ~ automata(petrinet(automata(AbsConcurrent2PN))).
}

// abstraction example from the crib sheet
automata {
    Example = (a -> (x -> b -> STOP | c -> STOP))\{x}.
    AbsExample = abs(Example).
}

petrinet {
    ExamplePN = (a -> (x -> b -> STOP | c -> STOP))\{x}.
    AbsExamplePN = abs(ExamplePN).
}

operation {
    AbsExample ~ automata(AbsExamplePN).
    AbsExample ~ automata(petrinet(automata(AbsExamplePN))).
}

// buffer example
automata {
    Buff = (in -> out -> Buff).
    Buff2 = (a:Buff/{x/a.out} || b:Buff/{x/b.in})\{x}.
    AbsBuff = abs(Buff2).
}

petrinet {
    BuffPN = (in -> out -> BuffPN).
    Buff2PN = (a:BuffPN/{x/a.out} || b:BuffPN/{x/b.in})\{x}.
    AbsBuffPN = abs(Buff2PN).
}

operation {
    AbsBuff ~ automata(AbsBuffPN).
    AbsBuff ~ automata(petrinet(automata(AbsBuffPN))).
}