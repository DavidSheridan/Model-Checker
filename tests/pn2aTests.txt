const Coins = 4
const Locks = 2
const W = 3

automata {
    Simple = (takeTea -> STOP).

    Two = (teaButton -> takeTea -> STOP).

    CM = (teaButton -> takeTea -> STOP | coffeeButton -> takeCoffee -> STOP).

    VM = (coin -> (teaBtn -> tea -> STOP | coffeeBtn -> coffee -> STOP)).
    VM2 = (coin -> teaBtn -> coffee -> STOP | coin -> coffeeBtn -> coffee -> STOP).

    Basic = (a -> (t -> b -> STOP | c -> STOP)).
    Bas = Basic\{t}.

    Tt = (takeTea -> Tt).

    BT = (teaButton -> takeTea -> BT).

    P = (a -> Q),
        Q = (b -> P | c -> Q).

    TrRed = (red -> TrRed | turnGreen -> TrGreen),
        TrGreen = (green -> TrGreen | turnRed -> TrRed).

    Parallel = ((a -> b -> c -> STOP) || (x -> y -> z -> STOP)).
    Parallel2 = ((a -> m -> c -> STOP) || (x -> m -> z -> STOP))\{m}.

    Buff = (in -> out -> Buff).
    B2 = (one:Buff || two:Buff).
    B3 = (one:Buff/{move/one.out} || two:Buff/{move/two.in}).
    B4 = B3\{move}.

    Money = C[1],
        C[i:1..Coins] = (when (i < Coins) coin -> C[i + 1] | when (i == Coins) coin -> C[1]).

    Lock = ([i:1..Locks].setLock -> L[i]),
        L[j:1..Locks] = ([i:1..Locks].enter -> (when (i == j) open -> close -> L[j] | when (i != j) error -> Lock)).

    Worker = (getTask -> doTask -> Worker).
    Workers = (forall [i:1..W] ([i]:Worker)).
    Farmer = F[1],
        F[i:1..W] = (when (i < W) [i].getTask -> F[i + 1] | when (i >= W) [i].getTask -> F[1]).
    Farm = (Farmer || Workers).
}

petrinet {
    SimplePN = (takeTea -> STOP).

    TwoPN = (teaButton -> takeTea -> STOP).

    CMPN = (teaButton -> takeTea -> STOP | coffeeButton -> takeCoffee -> STOP).

    VMPN = (coin -> (teaBtn -> tea -> STOP | coffeeBtn -> coffee -> STOP)).
    VM2PN = (coin -> teaBtn -> coffee -> STOP | coin -> coffeeBtn -> coffee -> STOP).

    BasicPN = (a -> (t -> b -> STOP | c -> STOP)).
    BasPN = BasicPN\{t}.

    TtPN = (takeTea -> TtPN).

    BTPN = (teaButton -> takeTea -> BTPN).

    PPN = (a -> Q),
        Q = (b -> PPN | c -> Q).

    TrRedPN = (red -> TrRedPN | turnGreen -> TrGreen),
        TrGreen = (green -> TrGreen | turnRed -> TrRedPN).

    ParallelPN = ((a -> b -> c -> STOP) || (x -> y -> z -> STOP)).
    Parallel2PN = ((a -> m -> c -> STOP) || (x -> m -> z -> STOP))\{m}.

    BuffPN = (in -> out -> BuffPN).
    B2PN = (one:BuffPN || two:BuffPN).
    B3PN = (one:BuffPN/{move/one.out} || two:BuffPN/{move/two.in}).
    B4PN = B3PN\{move}.

    MoneyPN = C[1],
        C[i:1..Coins] = (when (i < Coins) coin -> C[i + 1] | when (i == Coins) coin -> C[1]).

    LockPN = ([i:1..Locks].setLock -> L[i]),
        L[j:1..Locks] = ([i:1..Locks].enter -> (when (i == j) open -> close -> L[j] | when (i != j) error -> LockPN)).

    WorkerPN = (getTask -> doTask -> WorkerPN).
    WorkersPN = (forall [i:1..W] ([i]:WorkerPN)).
    FarmerPN = F[1],
        F[i:1..W] = (when (i < W) [i].getTask -> F[i + 1] | when (i >= W) [i].getTask -> F[1]).
    FarmPN = (FarmerPN || WorkersPN).
}

Simple ~ automata(SimplePN).
Two ~ automata(TwoPN).
CM ~ automata(CMPN).
VM ~ automata(VMPN).
VM2 ~ automata(VM2PN).
Basic ~ automata(BasicPN).
Bas ~ automata(BasPN).
Tt ~ automata(TtPN).
BT ~ automata(BTPN).
P ~ automata(PPN).
TrRed ~ automata(TrRedPN).
Parallel ~ automata(ParallelPN).
Parallel2 ~ automata(Parallel2PN).
Buff ~ automata(BuffPN).
B2 ~ automata(B2PN).
B3 ~ automata(B3PN).
B4 ~ automata(B4PN).
Money ~ automata(MoneyPN).
Lock ~ automata(LockPN).
Worker ~ automata(WorkerPN).
Workers ~ automata(WorkersPN).
Farmer ~ automata(FarmerPN).
Farm ~ automata(FarmPN).